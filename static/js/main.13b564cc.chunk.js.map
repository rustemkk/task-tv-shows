{"version":3,"sources":["components/EpisodePage/index.module.scss","components/ShowPage/index.module.scss","components/ShowsPage/index.module.scss","components/RatingLabel/index.module.scss","components/App/index.module.scss","modules/episodes/actions.js","modules/episodes/constants.js","modules/episodes/selectors.js","components/EpisodePage/index.js","modules/shows/actions.js","modules/shows/constants.js","modules/shows/selectors.js","components/ShowPage/index.js","components/RatingLabel/index.js","components/ShowsPage/index.js","components/App/index.js","modules/episodes/reducer.js","utils/index.js","modules/episodes/schemas.js","modules/episodes/sagas.js","modules/episodes/index.js","modules/shows/reducer.js","modules/shows/schemas.js","modules/shows/sagas.js","modules/index.js","modules/shows/index.js","rootReducer.js","rootSaga.js","index.js","store.js"],"names":["module","exports","loadEpisodesSuccess","type","episodes","entities","episodesIds","result","getEpisodesEntities","state","get","getAllEpisodes","createSelector","map","id","sort","a","b","season","number","getEpisodeById","episodeId","getEpisodesByShowId","showId","filter","episode","mapDispatchToProps","loadEpisode","connect","ownProps","history","useHistory","useEffect","className","s","EpisodePage","ImageContainer","Image","alt","name","src","ContentContainer","Name","dangerouslySetInnerHTML","__html","summary","EpisodeProperty","Link","onClick","push","showName","airdate","loadShowsSuccess","shows","showsIds","getShowsEntities","getAllShows","getShowById","loadEpisodes","loadShow","show","length","Show","premiered","substring","ShowProperty","rating","average","genres","join","language","Episodes","Episode","key","RatingLabel","value","cn","ColorGrey","ColorGreen","ColorGold","loadShows","Shows","Rating","Genre","App","exact","path","component","ShowsPage","ShowPage","combineReducers","action","uniq","apiGET","fetch","method","then","res","json","catch","err","console","log","episodesSchema","schema","Entity","loadEpisodeTask","loadEpisodesTask","watchLoadEpisode","watchLoadEpisodes","_embedded","normalizedEpisodes","normalize","put","episodesActions","select","takeLatest","reducer","sagas","showsSchema","loadShowTask","loadShowsTask","watchLoadShow","watchLoadShows","normalizedShows","showsActions","reducers","modules","forEach","rootSaga","all","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","compose","applyMiddleware","run","configureStore","basename","document","getElementById"],"mappings":"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","file":"static/js/main.13b564cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"EpisodePage\":\"EpisodePage_EpisodePage__23eib\",\"ImageContainer\":\"EpisodePage_ImageContainer__HzPzd\",\"Image\":\"EpisodePage_Image__2lAjF\",\"ContentContainer\":\"EpisodePage_ContentContainer__2Eke3\",\"Name\":\"EpisodePage_Name__201u4\",\"EpisodeProperty\":\"EpisodePage_EpisodeProperty__1SkwK\",\"Link\":\"EpisodePage_Link__3OVwx\",\"Episodes\":\"EpisodePage_Episodes__2-h8x\",\"Episode\":\"EpisodePage_Episode__3MZ1V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Show\":\"ShowPage_Show__Oc3P5\",\"ImageContainer\":\"ShowPage_ImageContainer__1JYG4\",\"Image\":\"ShowPage_Image__2lGkK\",\"ContentContainer\":\"ShowPage_ContentContainer__2x9mB\",\"Name\":\"ShowPage_Name__1ENwJ\",\"ShowProperty\":\"ShowPage_ShowProperty__2Keb-\",\"Episodes\":\"ShowPage_Episodes__1eEfM\",\"Episode\":\"ShowPage_Episode__15lO0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Shows\":\"ShowsPage_Shows__2RD5-\",\"Show\":\"ShowsPage_Show__zequl\",\"Rating\":\"ShowsPage_Rating__29Fbi\",\"Name\":\"ShowsPage_Name__2K61q\",\"Genre\":\"ShowsPage_Genre__R6emS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RatingLabel\":\"RatingLabel_RatingLabel__2MKcz\",\"ColorGrey\":\"RatingLabel_ColorGrey__2I3Zn\",\"ColorGreen\":\"RatingLabel_ColorGreen__C9iRK\",\"ColorGold\":\"RatingLabel_ColorGold__2Lxns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1sVak\"};","import * as episodesConstants from './constants';\n\n\nexport const loadEpisode = (episodeId) => ({\n  type: episodesConstants.LOAD_EPISODE_REQUEST,\n  episodeId,\n});\n\nexport const loadEpisodes = (showId) => ({\n  type: episodesConstants.LOAD_EPISODES_REQUEST,\n  showId,\n});\n\nexport const loadEpisodesSuccess = ({ entities: { episodes }, result }) => ({\n  type: episodesConstants.LOAD_EPISODES_SUCCESS,\n  episodes,\n  episodesIds: result,\n});","export const LOAD_EPISODE_REQUEST = 'episodes/LOAD_EPISODE_REQUEST';\n\nexport const LOAD_EPISODES_REQUEST = 'episodes/LOAD_EPISODES_REQUEST';\nexport const LOAD_EPISODES_SUCCESS = 'episodes/LOAD_EPISODES_SUCCESS';","import { get } from 'lodash';\nimport { createSelector } from 'reselect';\n\n\nexport const getEpisodesEntities = (state) =>\n  get(state, 'episodes.episodes');\n\nexport const getEpisodesIds = (state) =>\n  get(state, 'episodes.episodesIds');\n\nexport const getAllEpisodes = createSelector(\n  getEpisodesEntities,\n  getEpisodesIds,\n  (episodes, episodesIds) => episodesIds\n    .map(id => episodes[id])\n    .sort((a, b) => a.season * 1000 + a.number > b.season * 1000 + b.number ? -1 : 1)\n);\n\nexport const getEpisodeById = (episodeId) => createSelector(\n  getEpisodesEntities,\n  (episodes) => episodes[episodeId]\n);\n\nexport const getEpisodesByShowId = (showId) => createSelector(\n  getAllEpisodes,\n  (episodes) => episodes.filter(episode => episode.showId === showId)\n);","import { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { loadEpisode } from 'modules/episodes/actions';\nimport { getEpisodeById } from 'modules/episodes/selectors';\n\nimport s from './index.module.scss';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const episodeId = +get(ownProps, 'match.params.episodeId');\n\n  return {\n    episode: getEpisodeById(episodeId)(state),\n    episodeId,\n  };\n};\n\nconst mapDispatchToProps = {\n  loadEpisode,\n};\n\nconst EpisodePage = ({ episode, episodeId, loadEpisode }) => {\n\n  const history = useHistory();\n\n  useEffect(() => {\n    if (episodeId && !episode) {\n      loadEpisode(episodeId);\n    }\n  }, [episode, episodeId, loadEpisode]);\n\n  return !episode ? null : (\n    <div className={s.EpisodePage}>\n      {get(episode, 'image.original') &&\n        <div className={s.ImageContainer}>\n          <img className={s.Image} alt={episode.name} src={get(episode, 'image.original')} />\n        </div>\n      }\n      <div className={s.ContentContainer}>\n        <div className={s.Name}>\n          {episode.name}\n        </div>\n        <div dangerouslySetInnerHTML={{ __html: episode.summary }} />\n        <div className={s.EpisodeProperty}>\n          <span>Show</span>\n          {': '}\n          <span className={s.Link} onClick={() => history.push(`/show/${episode.showId}`)}>{episode.showName}</span>\n        </div>\n        <div className={s.EpisodeProperty}>\n          <span>Season</span>\n          {': '}\n          {episode.season}\n        </div>\n        <div className={s.EpisodeProperty}>\n          <span>Episode</span>\n          {': '}\n          {episode.number}\n        </div>\n        <div className={s.EpisodeProperty}>\n          <span>Airdate</span>\n          {': '}\n          {episode.airdate}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nEpisodePage.propTypes = {\n  episode: PropTypes.object,\n  episodeId: PropTypes.number.isRequired,\n  loadEpisode: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EpisodePage);","import * as showConstants from './constants';\n\n\nexport const loadShow = (showId) => ({\n  type: showConstants.LOAD_SHOW_REQUEST,\n  showId,\n});\n\nexport const loadShows = () => ({\n  type: showConstants.LOAD_SHOWS_REQUEST,\n});\n\nexport const loadShowsSuccess = ({ entities: { shows }, result }) => ({\n  type: showConstants.LOAD_SHOWS_SUCCESS,\n  shows,\n  showsIds: result,\n});","export const LOAD_SHOW_REQUEST = 'shows/LOAD_SHOW_REQUEST';\n\nexport const LOAD_SHOWS_REQUEST = 'shows/LOAD_SHOWS_REQUEST';\nexport const LOAD_SHOWS_SUCCESS = 'shows/LOAD_SHOWS_SUCCESS';","import { get } from 'lodash';\nimport { createSelector } from 'reselect';\n\n\nexport const getShowsEntities = (state) =>\n  get(state, 'shows.shows');\n\nexport const getShowsIds = (state) =>\n  get(state, 'shows.showsIds');\n\nexport const getAllShows = createSelector(\n  getShowsEntities,\n  getShowsIds,\n  (shows, showsIds) => showsIds.map(id => shows[id]).sort((a, b) => a.name > b.name ? 1 : -1)\n);\n\nexport const getShowById = (showId) => createSelector(\n  getShowsEntities,\n  (shows) => shows[showId]\n);","import { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { loadEpisodes } from 'modules/episodes/actions';\nimport { getEpisodesByShowId } from 'modules/episodes/selectors';\nimport { loadShow } from 'modules/shows/actions';\nimport { getShowById } from 'modules/shows/selectors';\n\nimport s from './index.module.scss';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const showId = +get(ownProps, 'match.params.showId');\n\n  return {\n    episodes: getEpisodesByShowId(showId)(state),\n    show: getShowById(showId)(state),\n    showId,\n  };\n};\n\nconst mapDispatchToProps = {\n  loadEpisodes,\n  loadShow,\n};\n\nconst ShowPage = ({ episodes, loadEpisodes, loadShow, show, showId }) => {\n\n  const history = useHistory();\n\n  useEffect(() => {\n    if (showId && !show) {\n      loadShow(showId);\n    }\n  }, [loadShow, show, showId]);\n\n  useEffect(() => {\n    if (showId && !episodes.length <= 1) {\n      loadEpisodes(showId);\n    }\n  }, [episodes, loadEpisodes, showId]);\n\n  return !show ? null : (\n    <div className={s.Show}>\n      <div className={s.ImageContainer}>\n        <img className={s.Image} alt={show.name} src={get(show, 'image.original')} />\n      </div>\n      <div className={s.ContentContainer}>\n        <div className={s.Name}>\n          {show.name}\n          {', '}\n          {show.premiered.substring(0, 4)}\n        </div>\n        <div dangerouslySetInnerHTML={{ __html: show.summary }} />\n        <div className={s.ShowProperty}>\n          <span>Rating</span>\n          {': '}\n          {show.rating.average}\n        </div>\n        <div className={s.ShowProperty}>\n          <span>Genre</span>\n          {': '}\n          {show.genres.join(', ')}\n        </div>\n        <div className={s.ShowProperty}>\n          <span>Language</span>\n          {': '}\n          {show.language}\n        </div>\n        {episodes.length > 0 &&\n          <div className={s.Episodes}>\n            Episodes:\n            {episodes.map(episode =>\n              <div className={s.Episode} key={episode.id} onClick={() => history.push(`/episode/${episode.id}`)}>\n                {episode.season}\n                {'x'}\n                {episode.number}\n                {' - '}\n                {episode.name}\n              </div>\n            )}\n          </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nShowPage.propTypes = {\n  episodes: PropTypes.array,\n  loadEpisodes: PropTypes.func.isRequired,\n  loadShow: PropTypes.func.isRequired,\n  show: PropTypes.object,\n  showId: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowPage);","import cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport s from './index.module.scss';\n\n\nconst RatingLabel = ({ className, value }) => {\n  return !value ? null : (\n    <div\n      className={cn(\n        className,\n        s.RatingLabel,\n        value >= 4 && s.ColorGrey,\n        value >= 7 && s.ColorGreen,\n        value >= 9 && s.ColorGold,\n      )}\n    >\n      {value}\n    </div>\n  );\n}\n\nRatingLabel.propTypes = {\n  className: PropTypes.string,\n  value: PropTypes.number,\n};\n\nexport default RatingLabel;","import { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport RatingLabel from 'components/RatingLabel';\nimport { loadShows } from 'modules/shows/actions';\nimport { getAllShows } from 'modules/shows/selectors';\n\nimport s from './index.module.scss';\n\n\nconst mapStateToProps = (state) => ({\n  shows: getAllShows(state),\n})\n\nconst mapDispatchToProps = {\n  loadShows,\n};\n\nconst ShowsPage = ({ loadShows, shows }) => {\n\n  const history = useHistory();\n\n  useEffect(() => {\n    loadShows();\n  }, [loadShows]);\n\n  return (\n    <div className={s.Shows}>\n      {shows.map(show =>\n        <div className={s.Show} key={show.id} onClick={() => history.push(`/show/${show.id}`)}>\n          <RatingLabel className={s.Rating} value={get(show, 'rating.average')} />\n          <img alt={show.name} src={get(show, 'image.medium')} />\n          <span className={s.Name}>\n            {show.name}\n            {', '}\n            {show.premiered.substring(0, 4)}\n          </span>\n          <span className={s.Genre}>\n            {show.genres.join(', ')}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n\nShowsPage.propTypes = {\n  loadShows: PropTypes.func.isRequired,\n  shows: PropTypes.array,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowsPage);","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport EpisodePage from 'components/EpisodePage';\nimport ShowPage from 'components/ShowPage';\nimport ShowsPage from 'components/ShowsPage';\n\nimport s from './index.module.scss';\n\n\nconst App = () => {\n  return (\n    <div className={s.App}>\n      <Switch>\n        <Route exact path=\"/\" component={ShowsPage} />\n        <Route exact path=\"/episode/:episodeId\" component={EpisodePage} />\n        <Route exact path=\"/show/:showId\" component={ShowPage} />\n        <Route component={() => <div>page not found</div>} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","import { uniq } from 'lodash';\nimport { combineReducers } from 'redux';\n\nimport * as episodesConstants from './constants';\n\n\nconst episodes = (state = {}, action) => {\n  switch (action.type) {\n    case episodesConstants.LOAD_EPISODES_SUCCESS:\n      return { ...state, ...action.episodes };\n    default:\n      return state;\n  }\n};\n\nconst episodesIds = (state = [], action) => {\n  switch (action.type) {\n    case episodesConstants.LOAD_EPISODES_SUCCESS:\n      return uniq([...state, ...action.episodesIds]);\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  episodes,\n  episodesIds,\n});","const apiUrl = 'https://api.tvmaze.com';\n\nexport const apiGET = (path) => {\n  return fetch(`${apiUrl}${path}`, { method: 'GET' })\n    .then(res => res.json())\n    .catch(err => console.log('Error: ', err));\n}","import { schema } from 'normalizr';\n\n\nconst episodeSchema = new schema.Entity('episodes');\n\nexport const episodesSchema = [episodeSchema];","import { get } from 'lodash';\nimport { put, select, takeLatest } from 'redux-saga/effects';\nimport { normalize } from 'normalizr';\n\nimport { apiGET } from 'utils';\n\nimport * as episodesActions from './actions';\nimport * as episodesConstants from './constants';\nimport { episodesSchema } from './schemas';\nimport { getShowById } from 'modules/shows/selectors';\n\n\nfunction* loadEpisodeTask({ episodeId }) {\n  try {\n    const result = yield apiGET(`/episodes/${episodeId}?embed=show`);\n    const showId = get(result, '_embedded.show.id');\n    const showName = get(result, '_embedded.show.name');\n    delete result._embedded;\n    const normalizedEpisodes = normalize([{ ...result, showId, showName }], episodesSchema);\n    yield put(episodesActions.loadEpisodesSuccess(normalizedEpisodes));\n  } catch (err) {\n    console.log('loadEpisodeTaskError', err);\n  }\n}\n\nfunction* loadEpisodesTask({ showId }) {\n  try {\n    const result = yield apiGET(`/shows/${showId}/episodes`);\n    const show = yield select(getShowById(showId));\n    const showName = get(show, 'name');\n    const normalizedEpisodes = normalize(result.map(episode => ({ ...episode, showId, showName })), episodesSchema);\n    yield put(episodesActions.loadEpisodesSuccess(normalizedEpisodes));\n  } catch (err) {\n    console.log('loadEpisodesTaskError', err);\n  }\n}\n\nfunction* watchLoadEpisode() {\n  yield takeLatest(episodesConstants.LOAD_EPISODE_REQUEST, loadEpisodeTask);\n}\n\nfunction* watchLoadEpisodes() {\n  yield takeLatest(episodesConstants.LOAD_EPISODES_REQUEST, loadEpisodesTask);\n}\n\nexport default [\n  watchLoadEpisode(),\n  watchLoadEpisodes(),\n];","import reducer from './reducer';\nimport sagas from './sagas';\n\n\nexport default {\n  name: 'episodes',\n  reducer,\n  sagas,\n};","import { uniq } from 'lodash';\nimport { combineReducers } from 'redux';\n\nimport * as showsConstants from './constants';\n\n\nconst shows = (state = {}, action) => {\n  switch (action.type) {\n    case showsConstants.LOAD_SHOWS_SUCCESS:\n      return { state, ...action.shows };\n    default:\n      return state;\n  }\n};\n\nconst showsIds = (state = [], action) => {\n  switch (action.type) {\n    case showsConstants.LOAD_SHOWS_SUCCESS:\n      return uniq([...state, ...action.showsIds]);\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  shows,\n  showsIds,\n});","import { schema } from 'normalizr';\n\n\nconst showSchema = new schema.Entity('shows');\n\nexport const showsSchema = [showSchema];","import { put, takeLatest } from 'redux-saga/effects';\nimport { normalize } from 'normalizr';\n\nimport { apiGET } from 'utils';\n\nimport * as showsActions from './actions';\nimport * as showsConstants from './constants';\nimport { showsSchema } from './schemas';\n\n\nfunction* loadShowTask({ showId }) {\n  try {\n    const result = yield apiGET(`/shows/${showId}`);\n    const normalizedShows = normalize([result], showsSchema);\n    yield put(showsActions.loadShowsSuccess(normalizedShows));\n  } catch (err) {\n    console.log('loadShowTaskError', err);\n  }\n}\n\nfunction* loadShowsTask() {\n  try {\n    const result = yield apiGET('/search/shows?q=girls');\n    const normalizedShows = normalize(result.map(s => s.show), showsSchema);\n    yield put(showsActions.loadShowsSuccess(normalizedShows));\n  } catch (err) {\n    console.log('loadShowsTaskError', err);\n  }\n}\n\nfunction* watchLoadShow() {\n  yield takeLatest(showsConstants.LOAD_SHOW_REQUEST, loadShowTask);\n}\n\nfunction* watchLoadShows() {\n  yield takeLatest(showsConstants.LOAD_SHOWS_REQUEST, loadShowsTask);\n}\n\nexport default [\n  watchLoadShow(),\n  watchLoadShows(),\n];","import episodes from './episodes';\nimport shows from './shows';\n\n\nexport default [\n  episodes,\n  shows,\n];\n","import reducer from './reducer';\nimport sagas from './sagas';\n\n\nexport default {\n  name: 'shows',\n  reducer,\n  sagas,\n};","import { combineReducers } from 'redux';\n\nimport modules from './modules';\n\n\nlet reducers = {};\n\nmodules.forEach(module => {\n  if (module.reducer) {\n    reducers = { ...reducers, [module.name]: module.reducer };\n  }\n});\n\nexport default combineReducers(reducers);","import { all } from 'redux-saga/effects';\n\nimport modules from './modules';\n\n\nlet sagas = [];\n\nmodules.forEach(module => {\n  if (module.sagas) {\n    sagas = [...sagas, ...module.sagas];\n  }\n});\n\nexport default function* rootSaga() {\n  yield all(sagas);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from 'components/App';\n\nimport './index.scss';\nimport configureStore from './store';\n\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <HashRouter basename=\"/\">\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);","import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    compose(applyMiddleware(sagaMiddleware))\n  );\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}"],"sourceRoot":""}