{"version":3,"sources":["components/ShowsPage/index.module.scss","components/RatingLabel/index.module.scss","components/App/index.module.scss","components/RatingLabel/index.js","modules/shows/constants.js","modules/shows/actions.js","modules/shows/selectors.js","utils/history.js","components/ShowsPage/index.js","components/App/index.js","modules/shows/reducer.js","modules/shows/schemas.js","modules/shows/sagas.js","utils/index.js","modules/index.js","modules/shows/index.js","rootReducer.js","rootSaga.js","index.js","store.js"],"names":["module","exports","RatingLabel","className","value","cn","s","ColorGrey","ColorGreen","ColorGold","LOAD_SHOWS_SUCCESS","loadShowsSuccess","shows","entities","result","type","showConstants","showsIds","getShowsEntities","state","get","getAllShows","createSelector","map","id","sort","a","b","name","history","createBrowserHistory","mapDispatchToProps","loadShows","connect","useEffect","Shows","show","Show","key","onClick","push","Rating","alt","src","Name","premiered","substring","Genre","genres","join","App","exact","path","component","ShowsPage","combineReducers","action","showsConstants","uniq","showsSchema","schema","Entity","loadShowsTask","watchLoadShows","fetch","method","then","res","json","normalized","normalize","put","showsActions","console","log","takeEvery","reducer","sagas","reducers","modules","forEach","rootSaga","all","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","compose","applyMiddleware","run","configureStore","document","getElementById"],"mappings":"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","file":"static/js/main.cc80c608.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Shows\":\"ShowsPage_Shows__2RD5-\",\"Show\":\"ShowsPage_Show__zequl\",\"Rating\":\"ShowsPage_Rating__29Fbi\",\"Name\":\"ShowsPage_Name__2K61q\",\"Genre\":\"ShowsPage_Genre__R6emS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RatingLabel\":\"RatingLabel_RatingLabel__2MKcz\",\"ColorGrey\":\"RatingLabel_ColorGrey__2I3Zn\",\"ColorGreen\":\"RatingLabel_ColorGreen__C9iRK\",\"ColorGold\":\"RatingLabel_ColorGold__2Lxns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1sVak\"};","import cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport s from './index.module.scss';\n\n\nconst RatingLabel = ({ className, value }) => {\n  return !value ? null : (\n    <div\n      className={cn(\n        className,\n        s.RatingLabel,\n        value >= 4 && s.ColorGrey,\n        value >= 7 && s.ColorGreen,\n        value >= 9 && s.ColorGold,\n      )}\n    >\n      {value}\n    </div>\n  );\n}\n\nRatingLabel.propTypes = {\n  className: PropTypes.string,\n  value: PropTypes.number,\n};\n\nexport default RatingLabel;","export const LOAD_SHOWS_REQUEST = 'contacts/LOAD_SHOWS_REQUEST';\nexport const LOAD_SHOWS_SUCCESS = 'contacts/LOAD_SHOWS_SUCCESS';","import * as showConstants from \"./constants\";\n\n\nexport const loadShows = () => ({\n  type: showConstants.LOAD_SHOWS_REQUEST,\n})\n\nexport const loadShowsSuccess = ({ entities: { shows }, result }) => ({\n  type: showConstants.LOAD_SHOWS_SUCCESS,\n  shows,\n  showsIds: result,\n});","import { get } from 'lodash';\nimport { createSelector } from 'reselect';\n\n\nexport const getShowsEntities = (state) =>\n  get(state, 'shows.shows');\n\nexport const getShowsIds = (state) =>\n  get(state, 'shows.showsIds');\n\nexport const getAllShows = createSelector(\n  getShowsEntities,\n  getShowsIds,\n  (shows, showsIds) => showsIds.map(id => shows[id]).sort((a, b) => a.name > b.name ? 1 : -1)\n);\n\nexport const getShowById = (showId) => createSelector(\n  getShowsEntities,\n  (shows) => shows[showId]\n);","import { createBrowserHistory } from 'history';\n\n\nconst history = createBrowserHistory();\n\nexport default history;","import { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport RatingLabel from 'components/RatingLabel';\nimport { loadShows } from 'modules/shows/actions';\nimport { getAllShows } from 'modules/shows/selectors';\nimport history from 'utils/history';\n\nimport s from './index.module.scss';\n\n\nconst mapStateToProps = (state) => ({\n  shows: getAllShows(state),\n})\n\nconst mapDispatchToProps = {\n  loadShows,\n};\n\nconst ShowsPage = ({ loadShows, shows }) => {\n\n  useEffect(() => {\n    loadShows();\n  }, [loadShows]);\n\n  return (\n    <div className={s.Shows}>\n      {shows.map(show =>\n        <div className={s.Show} key={show.id} onClick={() => history.push(`/show/${show.id}`)}>\n          <RatingLabel className={s.Rating} value={get(show, 'rating.average')} />\n          <img alt={show.name} src={get(show, 'image.medium')} />\n          <span className={s.Name}>\n            {show.name}\n            {', '}\n            {show.premiered.substring(0, 4)}\n          </span>\n          <span className={s.Genre}>\n            {show.genres.join(', ')}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n\nShowsPage.propTypes = {\n  loadShows: PropTypes.func.isRequired,\n  shows: PropTypes.array,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowsPage);","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport ShowsPage from 'components/ShowsPage';\n\nimport s from './index.module.scss';\n\n\nconst App = () => {\n  return (\n    <div className={s.App}>\n      <Switch>\n        <Route exact path=\"/\" component={ShowsPage} />\n        <Route component={() => <div>page not found</div>} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","import { uniq } from 'lodash';\nimport { combineReducers } from 'redux';\n\nimport * as showsConstants from './constants';\n\n\nconst shows = (state = {}, action) => {\n  switch (action.type) {\n    case showsConstants.LOAD_SHOWS_SUCCESS:\n      return { state, ...action.shows };\n    default:\n      return state;\n  }\n};\n\nconst showsIds = (state = [], action) => {\n  switch (action.type) {\n    case showsConstants.LOAD_SHOWS_SUCCESS:\n      return uniq([...state, ...action.showsIds]);\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  shows,\n  showsIds,\n});","import { schema } from 'normalizr';\n\n\nconst showSchema = new schema.Entity('shows');\n\nexport const showsSchema = [showSchema];","import { put, takeEvery } from 'redux-saga/effects';\nimport { normalize } from 'normalizr';\n\nimport { apiGET } from 'utils';\n\nimport * as showsActions from './actions';\nimport * as showConstants from './constants';\nimport { showsSchema } from './schemas';\n\n\nfunction* loadShowsTask() {\n  try {\n    const result = yield apiGET('/search/shows?q=girls');\n    const normalized = normalize(result.map(s => s.show), showsSchema);\n    yield put(showsActions.loadShowsSuccess(normalized));\n  } catch (err) {\n    console.log('loadShowsTaskError', err);\n  }\n}\n\nfunction* watchLoadShows() {\n  yield takeEvery(showConstants.LOAD_SHOWS_REQUEST, loadShowsTask);\n}\n\nexport default [\n  watchLoadShows(),\n];","const apiUrl = 'http://api.tvmaze.com';\n\nexport const apiGET = (path) => {\n  return fetch(`${apiUrl}${path}`, { method: 'GET' })\n    .then(res => res.json());\n}","import shows from './shows';\n\n\nexport default [\n  shows,\n];\n","import reducer from './reducer';\nimport sagas from './sagas';\n\n\nexport default {\n  name: 'shows',\n  reducer,\n  sagas,\n};","import { combineReducers } from 'redux';\n\nimport modules from './modules';\n\n\nlet reducers = {};\n\nmodules.forEach(module => {\n  if (module.reducer) {\n    reducers = { ...reducers, [module.name]: module.reducer };\n  }\n});\n\nexport default combineReducers(reducers);","import { all } from 'redux-saga/effects';\n\nimport modules from './modules';\n\n\nlet sagas = [];\n\nmodules.forEach(module => {\n  if (module.sagas) {\n    sagas = [...sagas, ...module.sagas];\n  }\n});\n\nexport default function* rootSaga() {\n  yield all(sagas);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router-dom';\n\nimport App from 'components/App';\nimport history from 'utils/history';\n\nimport './index.scss';\nimport configureStore from './store';\n\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);","import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    compose(applyMiddleware(sagaMiddleware))\n  );\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}"],"sourceRoot":""}